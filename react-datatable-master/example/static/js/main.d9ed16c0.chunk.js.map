{"version":3,"sources":["UserList.js","Users.js","serviceWorker.js","index.js"],"names":["UserList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteUser","bind","assertThisInitialized","columns","key","text","className","align","sortable","width","cell","record","react_default","a","createElement","react","onClick","editUser","style","marginRight","config","page_size","length_menu","filename","no_data_text","button","excel","print","user","console","log","lib_default","records","users","Component","Users","state","loadUsers","sortUsers","handleUserSubmit","handleUserDelete","handleUserUpdate","_this2","axios","get","url","then","res","setState","data","_this3","order","column","catch","err","error","_this4","post","id","delete","concat","put","src_UserList","onSort","Boolean","window","location","hostname","match","ReactDOM","render","src_Users","pollInterval","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9ed16c0.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport ReactDatatable from '@ashvin27/react-datatable';\n\nclass UserList extends Component {\n    constructor(props) {\n        super(props);\n        this.deleteUser = this.deleteUser.bind(this);\n        this.columns = [\n            {\n                key: \"name\", \n                text: \"Name\",\n                className: \"name\",\n                align: \"left\",\n                sortable: true,\n            },\n            {\n                key: \"address\",\n                text: \"Address\",\n                className: \"address\",\n                align: \"left\",\n                sortable: true\n            },\n            {\n                key: \"postcode\",\n                text: \"Postcode\",\n                className: \"postcode\",\n                sortable: true\n            },\n            {\n                key: \"rating\",\n                text: \"Rating\",\n                className: \"rating\",\n                align: \"left\",\n                sortable: true\n            },\n            {\n                key: \"type_of_food\",\n                text: \"Type of Food\",\n                className: \"type_of_food\",\n                sortable: true,\n                align: \"left\"\n            },\n            {\n                key: \"action\",\n                text: \"Action\",\n                className: \"action\",\n                width: 100,\n                align: \"left\",\n                sortable: false,\n                cell: record => { \n                    return (\n                        <Fragment>\n                            <button\n                                className=\"tblActionBtn action-icon btn btn-primary btn-sm\"\n                                onClick={() => this.editUser(record)}\n                                style={{marginRight: '5px'}}>\n                                <i className=\"fa fa-edit\"></i>\n                            </button>\n                            <button className=\"tblActionBtn action-icon btn btn-danger btn-sm\" onClick={() => this.deleteUser(record)}>\n                                <i className=\"fa fa-trash\"></i>\n                            </button>\n                        </Fragment>\n                    );\n                }\n            }\n        ];\n        this.config = {\n            page_size: 10,\n            length_menu: [ 10, 20, 50 ],\n            filename: \"Users\",\n            no_data_text: 'No data available!',\n            button: {\n                excel: true,\n                print: true\n            }\n        }\n    }\n\n    editUser(user) {\n        console.log(\"Edit User\", user);\n    }\n\n    deleteUser(user) {\n        console.log(\"Delete User\", user);\n    }\n\n    render() {\n        return (\n            <div>\n                <ReactDatatable\n                    config={this.config}\n                    records={this.props.users}\n                    columns={this.columns}\n                />\n            </div>\n        )\n    }\n}\nexport default UserList;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport UserList from './UserList';\n// import UserForm from './UserForm';\n// import style from './style';\n\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: []\n        };\n        this.loadUsers = this.loadUsers.bind(this);\n        this.sortUsers = this.sortUsers.bind(this);\n        this.handleUserSubmit = this.handleUserSubmit.bind(this);\n        this.handleUserDelete = this.handleUserDelete.bind(this);\n        this.handleUserUpdate = this.handleUserUpdate.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadUsers();\n    }\n    \n    loadUsers() {\n        axios.get(this.props.url)\n        .then(res => {\n            this.setState({ users: res.data });\n        })\n    }\n\n    sortUsers(data) {\n        axios.get(this.props.url + \"?order=\" + data.order + \"&sort=\" + data.column)\n        .then(res => {\n            this.setState({ users: res.data });\n        })\n        .catch(err => {\n            console.error(err);\n        });\n    }\n\n    handleUserSubmit(user) {\n        axios.post(this.props.url, user)\n        .then(res => {\n            this.setState({ data: res.data });\n        })\n        .catch(err => {\n            console.error(err);\n        });\n    }\n\n    handleUserDelete(id) {\n        axios.delete(`${this.props.url}/${id}`)\n        .then(res => {\n            console.log('User deleted');\n        })\n        .catch(err => {\n            console.error(err);\n        });\n    }\n\n    handleUserUpdate(id, user) {\n        //sends the user id and new author/text to our api\n        axios.put(`${this.props.url}/${id}`, user)\n        .catch(err => {\n            console.log(err);\n        })\n    }\n    \n    render() {\n        return (\n            <div className=\"container\">\n                <h2>Restaurants:</h2>\n                <UserList\n                    users={this.state.users}\n                    onSort={this.sortUsers}/>\n                {/*<UserForm onSubmit={ this.handleUserSubmit }/> */}\n            </div>\n        )\n    }\n}\nexport default Users;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Users from './Users';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Users \n        url='./data/data.json'\n        pollInterval={2000} />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}